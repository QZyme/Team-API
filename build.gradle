plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url "https://maven.shedaniel.me/"  }
	maven {url"https://maven.terraformersmc.com/releases/"}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modApi("me.shedaniel.cloth:cloth-config-fabric:11.1.136"){
		exclude(group:"net.fabricmc.fabric-api")
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
    publications {
        register("mavenJava", MavenPublication) {
            // 主JAR配置
            artifact(remapJar) {
                // 正确设置 builtBy
                builtBy tasks.remapJar
                // 移除默认分类器
                classifier = null
            }

            // 源码JAR配置
            artifact(remapSourcesJar) {
                builtBy tasks.remapSourcesJar
                classifier = 'sources'  // 使用赋值语法
            }

            // POM配置
            pom {
                name = project.name
                description = 'A team api'
                url = 'https://github.com/QZyme/Team-API'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'QZyme'
                        name = 'QZyme'
                        email = 'QZyme@users.noreply.github.com'
                    }
                }
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
        // 本地仓库（测试用）
        mavenLocal()

        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/QZyme/Team-API"
            credentials {
                username = findProperty("githubUsername") ?: System.getenv("GITHUB_ACTOR")
                password = findProperty("githubToken") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}